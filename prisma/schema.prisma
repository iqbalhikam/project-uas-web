// 1. Konfigurasi Koneksi Database dan Generator Prisma Client
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Mengambil URL dari file .env
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------
// Tipe Data Enumerasi (Enum) untuk konsistensi
// ---------------------------------------------
enum Role {
  ADMIN
  CASHIER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  DEBIT_CARD
  CREDIT_CARD
  QRIS
}

enum StockMovementType {
  PURCHASE // Stok masuk dari pembelian
  SALE     // Stok keluar karena penjualan
  ADJUSTMENT // Penyesuaian manual (misal: stok opname)
}


// ---------------------------------------------
// TABEL MASTER (Data Acuan Utama)
// ---------------------------------------------

model User {
  id        String   @id @default(cuid()) @map("id")
  name      String   @map("name")
  email     String   @unique @map("email")
  password  String   @map("password")
  role      Role     @default(CASHIER) @map("role")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  sales     Sale[]

  @@map("users")
}

model Category {
  id         String      @id @default(cuid()) @map("id")
  name       String      @unique @map("name")
  createdAt  DateTime    @default(now()) @map("createdAt")
  updatedAt  DateTime    @updatedAt @map("updatedAt")
  products   Product[]
  promotions Promotion[] // <-- Tambahan relasi ke Promotion

  @@map("categories")
}

// ---- TABEL BARU ----
model Promotion {
  id              String    @id @default(cuid())
  description     String
  discountPercent Int
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  
  // Relasi opsional ke Kategori, agar diskon bisa berlaku per kategori
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Supplier {
  id              String          @id @default(cuid()) @map("id")
  name            String          @unique @map("name")
  contactPerson   String?         @map("contactPerson")
  phone           String?         @map("phone")
  address         String?         @map("address")
  createdAt       DateTime        @default(now()) @map("createdAt")
  updatedAt       DateTime        @updatedAt @map("updatedAt")
  purchaseOrders  PurchaseOrder[]

  @@map("suppliers")
}

model Product {
  id                  String               @id @default(cuid()) @map("id")
  sku                 String               @unique @map("sku")
  name                String               @map("name")
  description         String?              @map("description")
  purchasePrice       Float                @map("purchasePrice")
  sellingPrice        Float                @map("sellingPrice")
  stock               Int                  @default(0) @map("stock")
  createdAt           DateTime             @default(now()) @map("createdAt")
  updatedAt           DateTime             @updatedAt @map("updatedAt")
  categoryId          String               @map("categoryId")
  category            Category             @relation(fields: [categoryId], references: [id])
  saleItems           SaleItem[]
  purchaseOrderItems  PurchaseOrderItem[]
  stockMovements      StockMovement[]

  @@map("products")
}

model Sale {
  id            String        @id @default(cuid()) @map("id")
  invoiceNumber String        @unique @default(cuid()) @map("invoiceNumber") // Menggunakan CUID sebagai default nomor nota
  saleDate      DateTime      @default(now()) @map("saleDate")
  totalAmount   Float         @map("totalAmount")
  paymentMethod PaymentMethod @map("paymentMethod")
  
  // --- PERUBAHAN DI SINI ---
  // Relasi ke Customer dihapus
  
  userId        String        @map("userId")
  user          User          @relation(fields: [userId], references: [id])
  items         SaleItem[]

  @@map("sales")
}

model SaleItem {
  id          String   @id @default(cuid()) @map("id")
  quantity    Int      @map("quantity")
  priceAtSale Float    @map("priceAtSale")
  saleId      String   @map("saleId")
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String   @map("productId")
  product     Product  @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model PurchaseOrder {
  id          String              @id @default(cuid()) @map("id")
  orderDate   DateTime            @default(now()) @map("orderDate")
  status      OrderStatus         @default(PENDING) @map("status")
  totalAmount Float               @map("totalAmount")
  supplierId  String              @map("supplierId")
  supplier    Supplier            @relation(fields: [supplierId], references: [id])
  items       PurchaseOrderItem[]
  movements   StockMovement[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid()) @map("id")
  quantity        Int           @map("quantity")
  priceAtPurchase Float         @map("priceAtPurchase")
  purchaseOrderId String        @map("purchaseOrderId")
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  productId       String        @map("productId")
  product         Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

model StockMovement {
  id             String            @id @default(cuid()) @map("id")
  type           StockMovementType @map("type")
  quantityChange Int               @map("quantityChange")
  reason         String?           @map("reason")
  movementDate   DateTime          @default(now()) @map("movementDate")
  
  productId      String            @map("productId")
  product        Product           @relation(fields: [productId], references: [id])
  
  // Relasi opsional, tergantung jenis pergerakan
  saleId         String?           @map("saleId")
  purchaseOrderId String?          @map("purchaseOrderId")
  purchaseOrder  PurchaseOrder?    @relation(fields: [purchaseOrderId], references: [id])

  @@map("stock_movements")
}